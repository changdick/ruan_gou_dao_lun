@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + updateBomb():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootNum:int
    # power:int
    # direction:int
    # shootStrategy: ShootStrategy
    # bulletType: String
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + addHP(int add):void
    + getHp():int
    + getShootNum(): int
    + setShootNum(int shootNum): void
    + getPower(): int
    + setPower(int power): int
    + getDirection(int power): int
    + setShootStrategy(ShootStrategy shootStrategy): void
    + setDirection(int direction): void

 }

class HeroAircraft {
  - {static}instance: HeroAircraft
  + {static} getInstance(): HeroAircraft
  - HeroAircraft(int locationX, int locationY,
   int speedX, int speedY, int hp)
  + forward(): void
}


AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY,
    int speedX, int speedY, int hp)
    + forward():void
    + vanish(): void

}
AbstractAircraft <|-- MobEnemy

class EliteEnemy {

    + EliteEnemy(int locationX, int locationY,
    int speedX, int speedY, int hp)
    + forward():void
    + vanish(): void

}
AbstractAircraft <|-- EliteEnemy
class SuperEliteEnemy {
    + SuperEliteEnemy(int locationX, int locationY,
    int speedX, int speedY, int hp)
    + forward():void
    + updateBomb():void
    + vanish(): void

}
AbstractAircraft <|-- SuperEliteEnemy
class BossEnemy {
    - {static} bossAlive: boolean

    + BossEnemy(int locationX, int locationY ,
    int speedX, int speedY, int hp)
    + forward(): void
    + vanish(): void
    + shoot(): List<BaseBullet>
    + {static} isBossAlive(): boolean
    + updateBomb(): void
}
AbstractAircraft <|-- BossEnemy


abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

Abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + {abstract} work(HeroAircraft heroAircraft):void
}
class PropBlood {
    + PropBlood(int locationX, int locationY,
    int speedX, int speedY)
    + work(HeroAircraft heroAircraft):void
}
class PropBulletPlus {
    + PropBulletPlus(int locationX, int locationY,
    int speedX, int speedY)
    + work(HeroAircraft heroAircraft):void
}
class PropBomb {
- observers: List<AbstractFlyingObject>
+ PropBomb(int locationX, int locationY, int speedX, int speedY)
- registerObserver(AbstractFlyingObject observer):void
- registerObserver():void
+ removeObserver(AbstractFlyingObject observer):void
- notifyObservers():void
+ work(HeroAircraft heroAircraft):void
}
class PropBullet {
    + PropBullet(int locationX, int locationY,
    int speedX, int speedY)
    + work(HeroAircraft heroAircraft):void
}
AbstractProp <|-- PropBlood
AbstractProp <|-- PropBomb
AbstractProp <|-- PropBulletPlus
AbstractProp <|-- PropBullet
AbstractFlyingObject <|-- AbstractProp



@enduml